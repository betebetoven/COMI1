
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Collections;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_sintactico3 extends java_cup.runtime.lr_parser {
    public static ArrayList<String> rawlist = new ArrayList<>();
    public static listaenlazada p2 = new listaenlazada();
    public static listaenlazada rbol = new listaenlazada();
    public static ArrayList<nodo> hojas = new ArrayList<>() ;
    public static void hacearbol(listaenlazada pl, listaenlazada arbol)
    {
        nodo primero = new nodo(".");
        arbol.First = primero;//es el first y ahora agregar a la derecha
        arbol.First.agregaderecha("#");
        hojas.add(arbol.First.der);


        while (pl.First != null)
        {

            nodo ahoraizq;
            nodo ahorader;
            nodo ahora = pl.First;

            while (ahora != null)
            {

                String j = (String) pl.popFirst().value;
                ahoraizq = arbol.First;
                while (ahoraizq.izq != null || ((String)ahoraizq.value).equals("|"))
                    ahoraizq = ahoraizq.izq;
                if (((String)ahoraizq.value).equals("."))
                {
                    if(j.equals(")"))//CAMBIAR LOS UNIQ A DER Y VER QUE LOS ) ESTEN BIEN VALIDADOS VOLVER A SEGUIR EL ALGORITMO PASO A PASO CON LA TABLA
                    {
                        String pa = (String) pl.popFirst().value;
                        String conec = (String) pl.popFirst().value;
                        String sa = (String) pl.popFirst().value;
                        pl.popFirst();
                        ahoraizq.agregaizquierda(conec);
                        ahoraizq = ahoraizq.izq;
                        ahoraizq.agregaizquierda(pa);
                        ahoraizq.agregaderecha(sa);
                        hojas.add(ahoraizq.der);//AGREGA A HOJAS ARRAY
                        hojas.add(ahoraizq.izq);//AGREGA A HOJAS ARRAY

                    }
                    else
                    {
                        ahoraizq.agregaizquierda(j);
                        ahoraizq = ahoraizq.izq;
                        if((j.equals("*")||j.equals("+")||j.equals("?") )&& pl.First!=null)
                        {
                            j = (String) pl.popFirst().value;
                            if(j.equals(")"))
                            {
                                String pa = (String) pl.popFirst().value;
                                String conec = (String) pl.popFirst().value;
                                String sa = (String) pl.popFirst().value;
                                pl.popFirst();
                                ahoraizq.agregaderecha(conec);
                                ahoraizq = ahoraizq.der;
                                ahoraizq.agregaizquierda(pa);
                                ahoraizq.agregaderecha(sa);
                                hojas.add(ahoraizq.der);//AGREGA A HOJAS ARRAY
                                hojas.add(ahoraizq.izq);//AGREGA A HOJAS ARRAY

                            }
                            else
                            {
                                ahoraizq.agregaderecha(j);
                                hojas.add(ahoraizq.der);///agrega a hojas array
                            }




                        }


                    }
                }
                else
                {
                    nodo reemplazo = ahoraizq;
                    ahoraizq.Prev.izq = null;

                    nodo ahorizaiz = arbol.First;
                    while (ahorizaiz.izq != null || ((String)ahorizaiz.value).equals("|"))
                        ahorizaiz = ahorizaiz.izq;
                    ahorizaiz.agregaizquierda(".");
                    ahorizaiz = ahorizaiz.izq;
                    ahorizaiz.der = reemplazo;
                    if (!((String)ahorizaiz.der.value).equals("*")||!((String)ahorizaiz.der.value).equals("+")||!((String)ahorizaiz.der.value).equals("?")||!((String)ahorizaiz.der.value).equals("|"))
                        hojas.add(ahorizaiz.der);
                    if(j.equals(")"))
                    {
                        String pa = (String) pl.popFirst().value;
                        String conec = (String) pl.popFirst().value;
                        String sa = (String) pl.popFirst().value;
                        pl.popFirst();
                        ahorizaiz.agregaizquierda(conec);
                        ahorizaiz = ahoraizq.izq;
                        ahorizaiz.agregaizquierda(pa);
                        ahorizaiz.agregaderecha(sa);
                        hojas.add(ahorizaiz.der);//AGREGA A HOJAS ARRAY
                        hojas.add(ahorizaiz.izq);//AGREGA A HOJAS ARRAY

                    }
                    else
                    {
                        ahorizaiz.agregaizquierda(j);
                        if (!(j.equals("*"))||!(j.equals("+"))||!(j.equals("?")) )
                            hojas.add(ahorizaiz.izq);///agrega a hojas array
                    }
                    ahorizaiz = ahorizaiz.izq;
                    if((j.equals("*")||j.equals("+")||j.equals("?") )&& pl.First!=null)
                    {
                        j = (String) pl.popFirst().value;
                        if(j.equals(")"))
                        {
                            String pa = (String) pl.popFirst().value;
                            String conec = (String) pl.popFirst().value;
                            String sa = (String) pl.popFirst().value;
                            pl.popFirst();
                            ahorizaiz.agregaderecha(conec);
                            ahorizaiz = ahorizaiz.der;
                            ahorizaiz.agregaizquierda(pa);
                            ahorizaiz.agregaderecha(sa);
                            hojas.add(ahorizaiz.der);//AGREGA A HOJAS ARRAY
                            hojas.add(ahorizaiz.izq);//AGREGA A HOJAS ARRAY

                        }
                        else
                        {
                            ahorizaiz.agregaderecha(j);
                            hojas.add(ahorizaiz.der);///agrega a hojas array
                        }




                    }

                }

                ahora = pl.First;
            }

            //AHORA HACERLO GRAFICO


        }





    }

    public static String texto;
    public static void imprime_arbol(nodo root)
    {
        texto+=root+"\n";
        //System.out.println("------------");
        //System.out.println(root+":");
        //System.out.println("R:"+root.der);
        //System.out.println("L:"+root.izq);
        if (root.izq!=null) {
            texto+=root.hashCode()+"->"+root.izq.hashCode()+";\n";
            imprime_arbol(root.izq);
        }
        if (root.der!=null) {
            texto+=root.hashCode()+"->"+root.der.hashCode()+";\n";
            imprime_arbol(root.der);
        }
    }
    public static void imprime_completo()
    {
        texto = "digraph G\n"
                +"{label=\"expresion regular\"\n"
                +"        node[shape = circle]\n"
                +"        node[style = filled]\n"
                +"        node[fillcolor = \"#EEEEE\"]\n"
                +"        node[color = \"#EEEEE\"]\n"
                +"        node[color = \"#31CEF0\"]\n";

        imprime_arbol(rbol.First);

        texto+="\n"
                +"}";
        System.out.println(texto);
        texto = "";

    }


    public final Class getSymbolContainer() {
    return Simbolos3.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_sintactico3() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_sintactico3(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_sintactico3(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\014\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\016\000\022\004\004\005\006\006\013\007\015\010" +
    "\014\011\012\012\010\013\005\001\002\000\024\002\ufffd" +
    "\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\001\002\000\024\002\ufff6\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\001" +
    "\002\000\024\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\011\ufffc\012\ufffc\013\ufffc\001\002\000\024\002" +
    "\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe" +
    "\012\ufffe\013\ufffe\001\002\000\024\002\ufff7\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7" +
    "\001\002\000\004\002\020\001\002\000\024\002\ufff8\004" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8" +
    "\013\ufff8\001\002\000\024\002\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\001\002" +
    "\000\024\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\013\ufff9\001\002\000\024\002\ufffa" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\001\002\000\024\002\000\004\004\005\006" +
    "\006\013\007\015\010\014\011\012\012\010\013\005\001" +
    "\002\000\024\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff" +
    "\010\uffff\011\uffff\012\uffff\013\uffff\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\016\000\010\002\010\003\015\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\016\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_sintactico3$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_sintactico3$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_sintactico3$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {


             
    }

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_sintactico3$actions {
  private final Analizador_sintactico3 parser;

  /** Constructor */
  CUP$Analizador_sintactico3$actions(Analizador_sintactico3 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico3$do_action_part00000000(
    int                        CUP$Analizador_sintactico3$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico3$parser,
    java.util.Stack            CUP$Analizador_sintactico3$stack,
    int                        CUP$Analizador_sintactico3$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_sintactico3$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_sintactico3$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.elementAt(CUP$Analizador_sintactico3$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.elementAt(CUP$Analizador_sintactico3$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico3$stack.elementAt(CUP$Analizador_sintactico3$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_sintactico3$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.elementAt(CUP$Analizador_sintactico3$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_sintactico3$parser.done_parsing();
          return CUP$Analizador_sintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= E 
            {
              Object RESULT =null;
		
String err = "";
Collections.reverse(rawlist);
for (String n:rawlist)
{
err+=n;
p2.agrega(n);
}
System.out.println(p2);
hacearbol(p2,rbol);
imprime_completo();
p2.First = null;
rawlist.clear();





                           
              CUP$Analizador_sintactico3$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // E ::= E ersim 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico3$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.elementAt(CUP$Analizador_sintactico3$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // E ::= ersim 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico3$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ersim ::= frase 
            {
              Object RESULT =null;
		int fraseleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()).left;
		int fraseright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()).right;
		Object frase = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico3$stack.peek()).value;
		rawlist.add(String.valueOf(frase));System.out.println("SI ENTRA LA CONCHAETUMADRE"+frase);
              CUP$Analizador_sintactico3$result = parser.getSymbolFactory().newSymbol("ersim",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ersim ::= o 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico3$stack.peek()).value;
		rawlist.add(String.valueOf(o));
              CUP$Analizador_sintactico3$result = parser.getSymbolFactory().newSymbol("ersim",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ersim ::= declaracion 
            {
              Object RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()).right;
		Object declaracion = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico3$stack.peek()).value;
		rawlist.add(String.valueOf(declaracion));
              CUP$Analizador_sintactico3$result = parser.getSymbolFactory().newSymbol("ersim",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ersim ::= mas 
            {
              Object RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()).right;
		Object mas = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico3$stack.peek()).value;
		rawlist.add(String.valueOf(mas));
              CUP$Analizador_sintactico3$result = parser.getSymbolFactory().newSymbol("ersim",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ersim ::= asterisco 
            {
              Object RESULT =null;
		int asteriscoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()).left;
		int asteriscoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()).right;
		Object asterisco = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico3$stack.peek()).value;
		rawlist.add(String.valueOf(asterisco));
              CUP$Analizador_sintactico3$result = parser.getSymbolFactory().newSymbol("ersim",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ersim ::= pregunta 
            {
              Object RESULT =null;
		int preguntaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()).left;
		int preguntaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()).right;
		Object pregunta = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico3$stack.peek()).value;
		rawlist.add(String.valueOf(pregunta));
              CUP$Analizador_sintactico3$result = parser.getSymbolFactory().newSymbol("ersim",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ersim ::= abre_parentesis 
            {
              Object RESULT =null;
		int abre_parentesisleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()).left;
		int abre_parentesisright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()).right;
		Object abre_parentesis = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico3$stack.peek()).value;
		rawlist.add(String.valueOf(abre_parentesis));
              CUP$Analizador_sintactico3$result = parser.getSymbolFactory().newSymbol("ersim",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ersim ::= cierra_parentesis 
            {
              Object RESULT =null;
		int cierra_parentesisleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()).left;
		int cierra_parentesisright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()).right;
		Object cierra_parentesis = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico3$stack.peek()).value;
		rawlist.add(String.valueOf(cierra_parentesis));
              CUP$Analizador_sintactico3$result = parser.getSymbolFactory().newSymbol("ersim",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico3$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico3$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_sintactico3$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico3$do_action(
    int                        CUP$Analizador_sintactico3$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico3$parser,
    java.util.Stack            CUP$Analizador_sintactico3$stack,
    int                        CUP$Analizador_sintactico3$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_sintactico3$do_action_part00000000(
                               CUP$Analizador_sintactico3$act_num,
                               CUP$Analizador_sintactico3$parser,
                               CUP$Analizador_sintactico3$stack,
                               CUP$Analizador_sintactico3$top);
    }
}

}
